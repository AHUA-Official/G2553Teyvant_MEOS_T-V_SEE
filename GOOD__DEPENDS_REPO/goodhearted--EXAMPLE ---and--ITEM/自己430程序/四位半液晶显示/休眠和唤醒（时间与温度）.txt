/**************************************************

      本实验利用温度传感器DS18B20，再通过HT1621驱动四位半液晶LCD
      来显示当前的温度（精确到0.01C）。

注意：
     1.P1.0，P1.4最好先别急着用,可以利用P1.0（ACLK）外部手表时钟检测是否进入LPM4 
       P1.4 (SMCLK)内部DCO,为了测试是否进入低功耗模式LPM3,要是没有输出方波
       说明已经进入LPM3
     2.
///////////////////////硬件连接/////////////////////
            
      液晶驱动HT1621D的7引脚   即：HT1621_DAT-------------------P1.5
      液晶驱动HT1621D的4引脚   即：HT1621_CS--------------------P1.1
      液晶驱动HT1621D的6引脚   即：HT1621_WR--------------------P1.2
      温度传感器DS18B20的2引脚 即：DS18B20----------------------P1.3

*************************************************/
#include <msp430g2553.h>
#define uint unsigned int 
#define uchar unsigned

//以下是HT1621 LCD显示宏定义
#define BIAS    0x52  //0b1000 0100 1010 1/3duty 3com
#define SYSDIS  0X00  //0b1000 0000 0000 关振系统荡器和LCD偏压发生器
#define SYSEN   0X02  //0b1000 0000 0010 打开系统振荡器
#define LCDOFF  0X04  //0b1000 0000 0100 关LCD偏压
#define LCDON   0X06  //0b1000 0000 0110 打开LCD偏压
#define XTAL    0x28  //0b1000 0010 1000 外部接时钟
#define RC256   0X30  //0b1000 0011 0000 内部时钟
#define TONEON  0X12  //0b1000 0001 0010 打开声音输出
#define TONEOFF 0X10  //0b1000 0001 0000 关闭声音输出
#define WDTDIS  0X0A  //0b1000 0000 1010 禁止看门狗
#define HT1621_DAT_H P1OUT|=BIT5
#define HT1621_DAT_L P1OUT&=~BIT5
#define HT1621_CS_H  P1OUT|=BIT1
#define HT1621_CS_L  P1OUT&=~BIT1
#define HT1621_WR_H  P1OUT|=BIT2
#define HT1621_WR_L  P1OUT&=~BIT2

//以下是DS18B20显示宏定义

#define DS18B20      BIT3
#define DS18B20_H    P1OUT |= BIT3
#define DS18B20_L    P1OUT &= ~BIT3

volatile uchar key_value,temp_a=0,sleep=0,time=0,temp_flag=1,time_flag=0;     //定义键值全局变量
volatile uchar qian=0,bai=0,shi=0,ge=0;//qian,bai,shi,ge 四个变量分别表示液晶的千百十个位
volatile uchar sec=0;
uchar Ht1621Tab[]={0x00};
uchar Ht1621Tab1[]={0x0c,0x0a,0x0c,  //0  不带小数点表格
                    0x00,0x00,0x0c,  //1
                    0x04,0x0e,0x08,  //2
                    0x00,0x0e,0x0c,  //3
                    0x08,0x04,0x0c,  //4
                    0x08,0x0e,0x04,  //5
                    0x0c,0x0e,0x04,  //6
                    0x00,0x08,0x0c,  //7
                    0x0c,0x0e,0x0c,  //8
                    0x08,0x0e,0x0c}; //9
uchar Ht1621Tab2[]={0x0e,0x0a,0x0c,  //0    带小数点表格
                    0x02,0x00,0x0c,  //1
                    0x06,0x0e,0x08,  //2
                    0x02,0x0e,0x0c,  //3
                    0x0a,0x04,0x0c,  //4
                    0x0a,0x0e,0x04,  //5
                    0x0e,0x0e,0x04,  //6
                    0x02,0x08,0x0c,  //7
                    0x0e,0x0e,0x0c,  //8
                    0x0a,0x0e,0x0c}; //9
uchar Ht1621Tab3[]={0x0c,0x0a,0x0e,  //0
                    0x00,0x00,0x0e,  //1
                    0x04,0x0e,0x0a,  //2
                    0x00,0x0e,0x0c,  //3
                    0x08,0x04,0x0c,  //4
                    0x08,0x0e,0x04,  //5
                    0x0c,0x0e,0x04,  //6
                    0x00,0x08,0x0c,  //7
                    0x0c,0x0e,0x0c,  //8
                    0x08,0x0e,0x0c}; //9
/******************************************************

                   函数声明

****************************************************/
void display (void);            //液晶显示

void time_display(void);
/////////////  DS18B20函数声明   //////
void B20_init(void);
uchar B20_readB(void);
void B20_writeB(uchar wrd);
uint Read_temp(void);

void port_init(void)            //端口初始化
{
  P1DIR |= BIT0+BIT1+BIT2+BIT3+BIT4+BIT5; //P1.0--P1.5 OUT
  
  P1SEL |= BIT4+BIT0;     // P1.0 ACLK外部手表时钟 ,P1.4 SMCLK内部DCO
                          // 所以P1.0，P1.4最好先别急着用
                          //为了测试是否进入低功耗模式
  P2DIR &= ~(BIT0+BIT1+BIT2);    //P1.0--P1.1 IN
  P2OUT |= BIT0+BIT1+BIT2;     //P2.0-P2.1上拉电阻
  P2REN |= BIT0+BIT1+BIT2;     //使能P2.0-P2.1的上拉电阻
  P2IE  |= BIT0+BIT1+BIT2;     // P2.0-P2.1 IO口中断使能
  P2IES |= BIT0+BIT1+BIT2;     //P2.0-P2.1 IO口边沿触发中断方式设置
  P2IFG &= ~(BIT0+BIT1+BIT2);  // P2.0-P2.1 IO口中断标志位清除
}
void int_Clock(void)               //时钟初始化
{
  BCSCTL1 = CALBC1_8MHZ;           //DCO数字振荡器=8MHZ
  DCOCTL  = CALBC1_8MHZ;           //DCO数字振荡器=8MHZ
}
void int_WDT(void)                 //看门狗设置
{
   WDTCTL = WDT_ADLY_1000;         //看门狗定时1000ms（辅助时钟）
   IE1 |=WDTIE;                    //开看门狗中断
}
void Delay_us(uint us)           // 延时us  前提是f=8MHZ
{    
  uint i;
  for(i=0;i<us;i++)
  __delay_cycles(8);      
}
void Delay_ms(uint ms)           // 延时ms  前提是f=8MHZ
{
  uint j;
  for(j=0;j<ms;j++)
  __delay_cycles(8000); 
}

//以下是HT1621 LCD显示子程序

/******************************************************
写数据函数,cnt为传送数据位数,数据传送为低位在前
*******************************************************/
void Ht1621Wr_Data(uchar Data,uchar cnt)
{
    uchar i;
    for (i=0;i<cnt;i++)
     {
        HT1621_WR_L;
        Delay_us(1);
        if(Data&0x80)
          HT1621_DAT_H;
        else
          HT1621_DAT_L;
        Delay_us(1);
        HT1621_WR_H;
        Delay_us(1);
        Data<<=1;
 }
}
/********************************************************
函数名称：void Ht1621WrCmd(uchar Cmd)
功能描述: HT1621命令写入函数
全局变量：无
参数说明：Cmd为写入命令数据
说明：写入命令标识位100
********************************************************/
void Ht1621WrCmd(uchar Cmd)
{
HT1621_CS_L;
Delay_us(1);
Ht1621Wr_Data(0x80,4); //写入命令标志100
Ht1621Wr_Data(Cmd,8); //写入命令数据
HT1621_CS_H;
Delay_us(1);
}
/********************************************************
函数名称：void Ht1621WrOneData(uchar Addr,uchar Data)
功能描述: HT1621在指定地址写入数据函数
全局变量：无
参数说明：Addr为写入初始地址，Data为写入数据
说明：因为HT1621的数据位4位，所以实际写入数据为参数的后4位
********************************************************/
void Ht1621WrOneData(uchar Addr,uchar Data)
{
    HT1621_CS_L;
    Ht1621Wr_Data(0xa0,3);    //写入数据标志101
    Ht1621Wr_Data(Addr<<2,6); //写入地址数据
    Ht1621Wr_Data(Data<<4,4); //写入数据
    HT1621_CS_H;
    Delay_us(1);
}
/********************************************************
函数名称：void Ht1621WrAllData(uchar Addr,uchar *p,uchar cnt)
功能描述: HT1621连续写入方式函数
全局变量：无
参数说明：Addr为写入初始地址，*p为连续写入数据指针，
cnt为写入数据总数
说明：HT1621的数据位4位，此处每次数据为8位，写入数据
总数按8位计算
********************************************************/
void Ht1621WrAllData(uchar Addr,uchar *p,uchar cnt)
{
    uchar i;
    HT1621_CS_L;
    Ht1621Wr_Data(0xa0,3); //写入数据标志101
    Ht1621Wr_Data(Addr<<2,6); //写入地址数据
    for (i=0;i<cnt;i++)
      {
        Ht1621Wr_Data(0x00,8); //写入数据
        p++;
      }
    HT1621_CS_H;
    Delay_us(1);
}
/********************************************************
函数名称：void Ht1621_Init(void)
功能描述: HT1621初始化
全局变量：无
参数说明：无
说明：初始化后，液晶屏所有字段均显示
********************************************************/
void Ht1621_Init(void)
{
    HT1621_CS_H;
    HT1621_WR_H;
    HT1621_DAT_H;
    Delay_ms(20);      //延时使LCD工作电压稳定
    Ht1621WrCmd(BIAS);
    Ht1621WrCmd(RC256); //使用内部振荡器
    Ht1621WrCmd(SYSDIS);
    Ht1621WrCmd(WDTDIS);
    Ht1621WrCmd(SYSEN);
    Ht1621WrCmd(LCDON);
}

//以上是HT1621 LCD显示子程序

void init_devices(void)
{
   port_init();                     //IO口设置
   int_Clock();                     //时钟设置
   int_WDT();                       //看门狗设置
}
void main( void )
{
   uint t;
   init_devices();                   // 初始化配置
   Ht1621_Init();                    //上电初始化LCD
   Delay_ms(1);                      //延时一段时间
   Ht1621WrAllData(0,Ht1621Tab,16);  //LCD清屏
   _EINT();                          // 开全局中断
   while(1)
    {  
       if(temp_flag)
       {
       t=Read_temp();                    //读取温度值
       t=t*6.25;
       qian=t/1000;
       bai=(t-qian*1000)/100;
       shi=((t-qian*1000)-bai*100)/10;
       ge=t%10;
       display();
       }
       if(time_flag)
       {
          time_display();
          display();
       }
       
      if(sleep)
      {
        LPM3;
        sleep=0;
      }
      
      if(temp_a)                            // 唤醒后，再次初始化
       { 
           init_devices();                   // 初始化配置
           Ht1621_Init();                    //上电初始化LCD
           Delay_ms(1);                      //延时一段时间
           Ht1621WrAllData(0,Ht1621Tab,16);  //LCD清屏
           _EINT();                          // 开全局中断
           temp_a=0;
        }
       
      if(time)
      {
           init_devices();                   // 初始化配置
           Ht1621_Init();                    //上电初始化LCD
           Delay_ms(1);                      //延时一段时间
           Ht1621WrAllData(0,Ht1621Tab,16);  //LCD清屏
           _EINT();                          // 开全局中断
           time=0;
       }
       
      }
}
void display (void)
{
       Ht1621WrOneData(0x01,Ht1621Tab1[3*qian]);
       Ht1621WrOneData(0x03,Ht1621Tab1[3*qian+1]);
       Ht1621WrOneData(0x05,Ht1621Tab1[3*qian+2]);//调用 Ht1621Tab3
                                                  //显示 最前端1
       Ht1621WrOneData(0x07,Ht1621Tab1[3*bai]);
       Ht1621WrOneData(0x09,Ht1621Tab1[3*bai+1]);
       Ht1621WrOneData(0x0b,Ht1621Tab1[3*bai+2]);
       
       Ht1621WrOneData(0x0d,Ht1621Tab2[3*shi]);
       Ht1621WrOneData(0x0f,Ht1621Tab2[3*shi+1]);
       Ht1621WrOneData(0x11,Ht1621Tab2[3*shi+2]);//调用 Ht1621Tab3 
                                                 //显示字母LOW BATTERY
       Ht1621WrOneData(0x13,Ht1621Tab1[3*ge]);   
       Ht1621WrOneData(0x15,Ht1621Tab1[3*ge+1]);
       Ht1621WrOneData(0x17,Ht1621Tab1[3*ge+2]); //调用 Ht1621Tab3  
                                                 //显示CONTINUITY
}


//以下是DS18B20温度检测子程序
/********************************
函数名称: B20_init
功    能: 复位DS18B20
参    数: 无
返回值  : 无
********************************/
void B20_init(void)
{
 P1DIR |= DS18B20;		     //配置为输出			  
 DS18B20_L;			     //拉低
 Delay_us(600);			     //等待600微秒
 DS18B20_H;			     //释放总线
 Delay_us(60);			     //等待60微秒
 P1DIR &= ~DS18B20;		     //配置为输入 
 while((P1IN &(DS18B20)));	     //等待DS18B20拉低
 while(!(P1IN &(DS18B20)));          //等待DS18B20释放总线
}
/*******************************************
函数名称: B20_readB
功    能: 读取一个字节的数据
参    数: 无
返回值  : retd--返回的一个字节数据
********************************************/
uchar B20_readB(void)
{
 uchar i,retd=0;
 for(i=0;i<8;i++)	 	//位计数值
 {
  retd>>=1;			//右移，准备接受新的数据位
  P1DIR |=DS18B20;		//配置为输出
  DS18B20_L;		        //拉低，启动读数据位
  DS18B20_H;			//释放总线
  Delay_us(5);			//等待5微秒
  P1DIR &=~DS18B20;		//配置为输入，开始读取数据位
  if(P1IN&DS18B20)			//该位是否为高
  {
   retd|=0x80;			//是就将此位置高
  }
  Delay_us(50);			//等待50微秒
 }
 return retd;			//将读到的一个字节返回
}
/*******************************************
函数名称: B20_writeB
功    能: 写入一个字节的数据
参    数: wrd--要写入的数据
返回值  : 无
********************************************/
void B20_writeB(uchar wrd)
{
 uchar i;
 for(i=0;i<8;i++)	  	//位计数值
 {
  P1DIR |=DS18B20;		//配置为输出
  DS18B20_L;		        //拉低，启动写数据位
  Delay_us(1);			//等待1微秒
  if(wrd&0x01)			//此位数据是否为高
  {
   DS18B20_H;		        //是高则将单总线拉高
  }
  else
  {
   DS18B20_L;		        //是低则将单总线拉低
  }
  Delay_us(50);		        //等待50微秒
  DS18B20_H;		        //释放总线
  wrd>>=1;			//右移，为写入新的数据位做准备
 }
  Delay_us(50);			//等待50微秒
}
/*******************************************
函数名称: Read_temp
功    能: 读取温度值
参    数: 无
返回值  : rettemp--返回的温度值
********************************************/
uint Read_temp(void)
{
 uchar templ,temph;
 uint temp;
 B20_init();	   //初始化，每次写命令都从初始化开始
 B20_writeB(0xcc); //跳过ROM
 B20_writeB(0x44); //启动温度转换
 B20_init();	   //初始化，每次写命令都从初始化开始
 B20_writeB(0xcc); //跳过ROM
 B20_writeB(0xbe); //读寄存器
 templ=B20_readB();//读温度低字节
 temph=B20_readB();//读温度高字节
 temp=templ+temph*256;//将温度整理成16位变量
 
  return temp;	   //返回16位变量

}
//以上是DS18B20温度检测子程序
void time_display(void)
{
  uchar fen,miao;
  if(sec>3599)
  {
    sec=0;
  }
  miao=sec%60;
  if(miao>59)
  {
    miao=0;
  }
  fen=sec/60;
  if(fen>59)
  {
    fen=0;
  }
  ge=miao%10;
  shi=miao/10;
  bai=fen%10;
  qian=fen/10;
}
//P2中断服务程序

#pragma vector=PORT2_VECTOR
__interrupt void Port_2(void)
{
  if((P2IFG & 0x07)!=0x07)     //判断是P2的哪个进入中断
  __delay_cycles(10000);       //按键去抖判断，大约延时8us
      if((P2IFG & 0x07)!=0x07) //再次判断是不是真正的中断
      { 
         key_value=P2IFG;      //对P2中断位置赋值给 key_value
         switch (key_value)    //对不同的中断进行处理.采switch查询
         {
             case 1:
                    Ht1621WrCmd(SYSDIS);  //关振系统荡器和LCD偏压发生器
                    Ht1621WrCmd(LCDOFF);  //关LCD偏压
                    Ht1621WrCmd(TONEOFF); //关闭声音输出）
                                          //其实这个没大必要关，因为开始就没有打开
                    sleep=1;              //赋睡眠标志
                    break;
             
             case 2:
                    LPM3_EXIT;            //退出中断
                    time_flag=0;
                    temp_flag=1;
                    temp_a=1;             //赋唤醒标志
                    break;
             case 4:
                    LPM3_EXIT;            //退出中断
                    time_flag=1;             //赋唤醒标志
                    temp_flag=0;
                    time=1;
                    break;
           }
         //P2IE |= BIT0+BIT1+BIT2;      // P2.0-P2.2 IO口中断使能(紧急情况)
         P2IFG &= ~(BIT0+BIT1+BIT2);  // P2.0-P2.2 IO口中断标志位清除
       }
}

#pragma vector=WDT_VECTOR          //看门狗中断服务程序
__interrupt void watchdog_time (void)
{
  sec++;
}