/**************************************************************
    
    其实用74HC595也是一种动态显示，所以必须利用循环才行。
    运用74HC595串入并出的方式显示8位共阴数码管,本实验是用P2.0,1,2
    利用看门狗定时器，实现电子表。即：数码管高两位显示时，中间两位显示分
    最后两位显示秒。
    P2.0接74HC595的12 脚，存储时钟(STCP)
    P2.1接74HC595的14 脚，串行数据输入脚(DS)
    P2.2接74HC595的11 脚，移位时钟(SHCP)

*************************************************************/
#include <msp430g2553.h>
#define uint unsigned int 
#define uchar unsigned char
//以下是74HC595所需的宏定义
#define HC595_Store_H P2OUT |= BIT0
#define HC595_Store_L P2OUT &= ~ BIT0
#define HC595_A_H     P2OUT |= BIT1
#define HC595_A_L     P2OUT &= ~ BIT1
#define HC595_Shift_H P2OUT |= BIT2
#define HC595_Shift_L P2OUT &= ~ BIT2
//以上是74HC595所需的宏定义
unsigned char const LedData[]= {0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,
                                0x7f,0x6f,0x77,0x7C,0x39,0x5E,0x79,0x71,//共阴数码管段选数组(0-F）
                                0xBf,0x86,0xDb,0xCf,0xE6,0xEd,0xFd,0x87,    
                                0xff,0xef,0xF7,0xFC,0xB9,0xDE,0xF9,0xF1,};//共阴数码管(带小数点)段选数组(0-F）
unsigned char const LedPos[] = {0xFE,0xFD,0xFB,0xF7,0xEF,0xDF,0xBF,0x7F}; //数码管位选数组，分别选通每一位数码管
volatile uchar sec=0,minter=0,hour=0;
/**********************************************
                函数声明
**********************************************/
void init_devices(void);
void port_init(void);
void int_WDT(void);
//以下是74HC595所需的函数定义
void HC595shift(void);
void HC595store(void);
void HC595send(uchar x);
void display(uchar pos,uchar dat); //pos则是表示选通哪一位，dat则是表示显示什么数据
//以上是74HC595所需的函数定义
void main( void )                //主函数
{
   init_devices();
   _EINT();                        //开全局中断
   while(1)
     {
        if(sec>59)
        {
          sec=0;
          minter++;
          if(minter>59)
          {
           minter=0;
           hour++;
           if(hour>24)
           {
             hour=0;
           }
          }
        }
        display(6,sec/10);
        display(7,sec%10);
        display(3,minter/10);
        display(4,minter%10);
        display(0,hour/10);
        display(1,hour%10);
     }
}
void init_devices(void)
{
   port_init();
   int_WDT();
}
void port_init(void)           //端口初始化
{
   P2DIR |= (BIT0+BIT1+BIT2);
}
void int_WDT(void)                 //看门狗设置
{   
   WDTCTL = WDT_ADLY_1000;           //  打开看门狗（在子系统时钟下定时0.5ms）
   IE1 |=WDTIE;                    // 开看门狗中断
}
void HC595send(uchar x)
{
   uchar n,temp;
   for(n=0;n<8;n++)	//一个字节要分8次写入
   {
      temp=x&0x80;	//记住一定要先写最高位
      if(temp!=0)	//判断是否不等于0
      {
         HC595_A_H;     //P1.1赋为1
         HC595shift();	//使寄存器移位
      }
      else		//等于0
      {
         HC595_A_L;     //P1.1赋为0
         HC595shift();  //使寄存器移位
      }	 
      x<<=1;		//数据左移一位，那么下一个循环将是获取
                        //第7位的数据，跟着是第6位,第5位,,,第1位
                        //最后把所有数据都移入HC595
    }
}
/***************************************
 字节写入存储寄存器，并且送往输出端口，数据刷新输出
***************************************/
void HC595store(void) 
{
   HC595_Store_L;   //先将存储时钟置低                  
   HC595_Store_H;   //将存储时钟置高产生一个上升沿，就会把一个字节
                    //写入存储寄存器，即将74HC595 的数据刷新输出。
} 
/**************************************
           寄存器移位函数
**************************************/
void HC595shift(void) 
{
   HC595_Shift_L;  //要将时钟线置低                 
   HC595_Shift_H;  //把时钟线拉高，则是上升沿，就会把进行寄存器移位操作
}
/*************************************
        显示函数，在某位显示某数据
*************************************/
void display(uchar pos,uchar dat) 
{
   HC595send(LedPos[pos]);   //一定要先把位选数据送入上级HC595 
                             //当把段选数据送入上级HC595时，
                             //位选数据则会移到下级HC595中
   HC595send(LedData[dat]);  //把数据送入下级HC595时，
                             //位选数据则会移到上级HC595中
   HC595store(); 	     //把数据显示出来
   
}
#pragma vector=WDT_VECTOR          //看门狗中断服务程序
__interrupt void watchdog_time (void)
{
 sec++;
}