C51 COMPILER V7.06   FASONG                                                                06/14/2008 14:42:06 PAGE 1   


C51 COMPILER V7.06, COMPILATION OF MODULE FASONG
OBJECT MODULE PLACED IN fasong.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE fasong.c BROWSE DEBUG OBJECTEXTEND

stmt level    source

   1          #include <reg52.h>
   2          #include <intrins.h>
   3          
   4          typedef unsigned char uchar;
   5          typedef unsigned char uint;
   6          //****************************************IO端口定义***************************************
   7          sbit    MISO    =P1^2;
   8          sbit    MOSI    =P3^2;
   9          sbit    SCK         =P1^6;
  10          sbit    CE          =P1^5;
  11          sbit    CSN             =P1^7;
  12          sbit    IRQ             =P1^3;
  13          //***********************************数码管0-9编码*******************************************
  14          uchar seg[10]={0xC0,0xCF,0xA4,0xB0,0x99,0x92,0x82,0xF8,0x80,0x90};         //0~~9段码
  15          uchar TxBuf[32]=
  16          {
  17          0x01,0x02,0x03,0x4,0x05,0x06,0x07,0x08,
  18          0x09,0x10,0x11,0x12,0x13,0x14,0x15,0x16,
  19          0x17,0x18,0x19,0x20,0x21,0x22,0x23,0x24,
  20          0x25,0x26,0x27,0x28,0x29,0x30,0x31,0x32,
  21          };       // 
  22          //************************************按键**********************************************
  23          sbit    KEY1=P3^6;
  24          sbit    KEY2=P3^7;
  25          //***********************************数码管位选**************************************************
  26          sbit    led1=P2^1;
  27          sbit    led0=P2^0;
  28          sbit    led2=P2^2;
  29          sbit    led3=P2^3;
  30          //*********************************************NRF24L01*************************************
  31          #define TX_ADR_WIDTH    5       // 5 uints TX address width
  32          #define RX_ADR_WIDTH    5       // 5 uints RX address width
  33          #define TX_PLOAD_WIDTH  32      // 20 uints TX payload
  34          #define RX_PLOAD_WIDTH  32      // 20 uints TX payload
  35          uint const TX_ADDRESS[TX_ADR_WIDTH]= {0x34,0x43,0x10,0x10,0x01};        //本地地址
  36          uint const RX_ADDRESS[RX_ADR_WIDTH]= {0x34,0x43,0x10,0x10,0x01};        //接收地址
  37          //***************************************NRF24L01寄存器指令***********************************************
             -********
  38          #define READ_REG        0x00    // 读寄存器指令
  39          #define WRITE_REG       0x20    // 写寄存器指令
  40          #define RD_RX_PLOAD     0x61    // 读取接收数据指令
  41          #define WR_TX_PLOAD     0xA0    // 写待发数据指令
  42          #define FLUSH_TX        0xE1    // 冲洗发送 FIFO指令
  43          #define FLUSH_RX        0xE2    // 冲洗接收 FIFO指令
  44          #define REUSE_TX_PL     0xE3    // 定义重复装载数据指令
  45          #define NOP             0xFF    // 保留
  46          //*************************************SPI(nRF24L01)寄存器地址********************************************
             -********
  47          #define CONFIG          0x00  // 配置收发状态，CRC校验模式以及收发状态响应方式
  48          #define EN_AA           0x01  // 自动应答功能设置
  49          #define EN_RXADDR       0x02  // 可用信道设置
  50          #define SETUP_AW        0x03  // 收发地址宽度设置
  51          #define SETUP_RETR      0x04  // 自动重发功能设置
  52          #define RF_CH           0x05  // 工作频率设置
  53          #define RF_SETUP        0x06  // 发射速率、功耗功能设置
C51 COMPILER V7.06   FASONG                                                                06/14/2008 14:42:06 PAGE 2   

  54          #define STATUS          0x07  // 状态寄存器
  55          #define OBSERVE_TX      0x08  // 发送监测功能
  56          #define CD              0x09  // 地址检测           
  57          #define RX_ADDR_P0      0x0A  // 频道0接收数据地址
  58          #define RX_ADDR_P1      0x0B  // 频道1接收数据地址
  59          #define RX_ADDR_P2      0x0C  // 频道2接收数据地址
  60          #define RX_ADDR_P3      0x0D  // 频道3接收数据地址
  61          #define RX_ADDR_P4      0x0E  // 频道4接收数据地址
  62          #define RX_ADDR_P5      0x0F  // 频道5接收数据地址
  63          #define TX_ADDR         0x10  // 发送地址寄存器
  64          #define RX_PW_P0        0x11  // 接收频道0接收数据长度
  65          #define RX_PW_P1        0x12  // 接收频道0接收数据长度
  66          #define RX_PW_P2        0x13  // 接收频道0接收数据长度
  67          #define RX_PW_P3        0x14  // 接收频道0接收数据长度
  68          #define RX_PW_P4        0x15  // 接收频道0接收数据长度
  69          #define RX_PW_P5        0x16  // 接收频道0接收数据长度
  70          #define FIFO_STATUS     0x17  // FIFO栈入栈出状态寄存器设置
  71          //**************************************************************************************
  72          void Delay(unsigned int s);
  73          void inerDelay_us(unsigned char n);
  74          void init_NRF24L01(void);
  75          uint SPI_RW(uint uchar);
  76          uchar SPI_Read(uchar reg);
  77          void SetRX_Mode(void);
  78          uint SPI_RW_Reg(uchar reg, uchar value);
  79          uint SPI_Read_Buf(uchar reg, uchar *pBuf, uchar uchars);
  80          uint SPI_Write_Buf(uchar reg, uchar *pBuf, uchar uchars);
  81          unsigned char nRF24L01_RxPacket(unsigned char* rx_buf);
  82          void nRF24L01_TxPacket(unsigned char * tx_buf);
  83          //*****************************************长延时*****************************************
  84          void Delay(unsigned int s)
  85          {
  86   1              unsigned int i;
  87   1              for(i=0; i<s; i++);
  88   1              for(i=0; i<s; i++);
  89   1      }
  90          //******************************************************************************************
  91          uint    bdata sta;   //状态标志
  92          sbit    RX_DR   =sta^6;
  93          sbit    TX_DS   =sta^5;
  94          sbit    MAX_RT  =sta^4;
  95          /******************************************************************************************
  96          /*延时函数
  97          /******************************************************************************************/
  98          void inerDelay_us(unsigned char n)
  99          {
 100   1              for(;n>0;n--)
 101   1                      _nop_();
 102   1      }
 103          //****************************************************************************************
 104          /*NRF24L01初始化
 105          //***************************************************************************************/
 106          void init_NRF24L01(void)
 107          {
 108   1          inerDelay_us(100);
 109   1              CE=0;    // chip enable
 110   1              CSN=1;   // Spi disable 
 111   1              SCK=0;   // Spi clock line init high
 112   1              SPI_Write_Buf(WRITE_REG + TX_ADDR, TX_ADDRESS, TX_ADR_WIDTH);    // 写本地地址  
 113   1              SPI_Write_Buf(WRITE_REG + RX_ADDR_P0, RX_ADDRESS, RX_ADR_WIDTH); // 写接收端地址
 114   1              SPI_RW_Reg(WRITE_REG + EN_AA, 0x01);      //  频道0自动 ACK应答允许     
 115   1              SPI_RW_Reg(WRITE_REG + EN_RXADDR, 0x01);  //  允许接收地址只有频道0，如果需要多频道可以参考Page21  
C51 COMPILER V7.06   FASONG                                                                06/14/2008 14:42:06 PAGE 3   

 116   1              SPI_RW_Reg(WRITE_REG + RF_CH, 0);        //   设置信道工作为2.4GHZ，收发必须一致
 117   1              SPI_RW_Reg(WRITE_REG + RX_PW_P0, RX_PLOAD_WIDTH); //设置接收数据长度，本次设置为32字节
 118   1              SPI_RW_Reg(WRITE_REG + RF_SETUP, 0x07);                 //设置发射速率为1MHZ，发射功率为最大值0dB       
 119   1              SPI_RW_Reg(WRITE_REG + CONFIG, 0x0e);                    // IRQ收发完成中断响应，16位CRC，主发送
 120   1      
 121   1      }
 122          /****************************************************************************************************
 123          /*函数：uint SPI_RW(uint uchar)
 124          /*功能：NRF24L01的SPI写时序
 125          /****************************************************************************************************/
 126          uint SPI_RW(uint uchar)
 127          {
 128   1              uint bit_ctr;
 129   1              for(bit_ctr=0;bit_ctr<8;bit_ctr++) // output 8-bit
 130   1              {
 131   2                      MOSI = (uchar & 0x80);         // output 'uchar', MSB to MOSI
 132   2                      uchar = (uchar << 1);           // shift next bit into MSB..
 133   2                      SCK = 1;                      // Set SCK high..
 134   2                      uchar |= MISO;                    // capture current MISO bit
 135   2                      SCK = 0;                          // ..then set SCK low again
 136   2              }
 137   1          return(uchar);                        // return read uchar
 138   1      }
 139          /****************************************************************************************************
 140          /*函数：uchar SPI_Read(uchar reg)
 141          /*功能：NRF24L01的SPI时序
 142          /****************************************************************************************************/
 143          uchar SPI_Read(uchar reg)
 144          {
 145   1              uchar reg_val;
 146   1              
 147   1              CSN = 0;                // CSN low, initialize SPI communication...
 148   1              SPI_RW(reg);            // Select register to read from..
 149   1              reg_val = SPI_RW(0);    // ..then read registervalue
 150   1              CSN = 1;                // CSN high, terminate SPI communication
 151   1              
 152   1              return(reg_val);        // return register value
 153   1      }
 154          /****************************************************************************************************/
 155          /*功能：NRF24L01读写寄存器函数
 156          /****************************************************************************************************/
 157          uint SPI_RW_Reg(uchar reg, uchar value)
 158          {
 159   1              uint status;
 160   1              
 161   1              CSN = 0;                   // CSN low, init SPI transaction
 162   1              status = SPI_RW(reg);      // select register
 163   1              SPI_RW(value);             // ..and write value to it..
 164   1              CSN = 1;                   // CSN high again
 165   1              
 166   1              return(status);            // return nRF24L01 status uchar
 167   1      }
 168          /****************************************************************************************************/
 169          /*函数：uint SPI_Read_Buf(uchar reg, uchar *pBuf, uchar uchars)
 170          /*功能: 用于读数据，reg：为寄存器地址，pBuf：为待读出数据地址，uchars：读出数据的个数
 171          /****************************************************************************************************/
 172          uint SPI_Read_Buf(uchar reg, uchar *pBuf, uchar uchars)
 173          {
 174   1              uint status,uchar_ctr;
 175   1              
 176   1              CSN = 0;                                // Set CSN low, init SPI tranaction
 177   1              status = SPI_RW(reg);                   // Select register to write to and read status uchar
C51 COMPILER V7.06   FASONG                                                                06/14/2008 14:42:06 PAGE 4   

 178   1              
 179   1              for(uchar_ctr=0;uchar_ctr<uchars;uchar_ctr++)
 180   1                      pBuf[uchar_ctr] = SPI_RW(0);    // 
 181   1              
 182   1              CSN = 1;                           
 183   1              
 184   1              return(status);                    // return nRF24L01 status uchar
 185   1      }
 186          /*********************************************************************************************************
 187          /*函数：uint SPI_Write_Buf(uchar reg, uchar *pBuf, uchar uchars)
 188          /*功能: 用于写数据：为寄存器地址，pBuf：为待写入数据地址，uchars：写入数据的个数
 189          /*********************************************************************************************************
             -/
 190          uint SPI_Write_Buf(uchar reg, uchar *pBuf, uchar uchars)
 191          {
 192   1              uint status,uchar_ctr;
 193   1              
 194   1              CSN = 0;            //SPI使能       
 195   1              status = SPI_RW(reg);   
 196   1              for(uchar_ctr=0; uchar_ctr<uchars; uchar_ctr++) //
 197   1                      SPI_RW(*pBuf++);
 198   1              CSN = 1;           //关闭SPI
 199   1              return(status);    // 
 200   1      }
 201          /****************************************************************************************************/
 202          /*函数：void SetRX_Mode(void)
 203          /*功能：数据接收配置 
 204          /****************************************************************************************************/
 205          void SetRX_Mode(void)
 206          {
 207   1              CE=0;
 208   1              SPI_RW_Reg(WRITE_REG + CONFIG, 0x0f);                   // IRQ收发完成中断响应，16位CRC ，主接收
 209   1              CE = 1; 
 210   1              inerDelay_us(130);
 211   1      }
 212          /******************************************************************************************************/
 213          /*函数：unsigned char nRF24L01_RxPacket(unsigned char* rx_buf)
 214          /*功能：数据读取后放如rx_buf接收缓冲区中
 215          /******************************************************************************************************/
 216          unsigned char nRF24L01_RxPacket(unsigned char* rx_buf)
 217          {
 218   1          unsigned char revale=0;
 219   1              sta=SPI_Read(STATUS);   // 读取状态寄存其来判断数据接收状况
 220   1              if(RX_DR)                               // 判断是否接收到数据
 221   1              {
 222   2                  CE = 0;                     //SPI使能
 223   2                      SPI_Read_Buf(RD_RX_PLOAD,rx_buf,TX_PLOAD_WIDTH);// read receive payload from RX_FIFO buffer
 224   2                      revale =1;                      //读取数据完成标志
 225   2              }
 226   1              SPI_RW_Reg(WRITE_REG+STATUS,sta);   //接收到数据后RX_DR,TX_DS,MAX_PT都置高为1，通过写1来清楚中断标志
 227   1              return revale;
 228   1      }
 229          /*********************************************************************************************************
             -**
 230          /*函数：void nRF24L01_TxPacket(unsigned char * tx_buf)
 231          /*功能：发送 tx_buf中数据
 232          /*********************************************************************************************************
             -*/
 233          void nRF24L01_TxPacket(unsigned char * tx_buf)
 234          {
 235   1              CE=0;                   //StandBy I模式 
 236   1              SPI_Write_Buf(WRITE_REG + RX_ADDR_P0, TX_ADDRESS, TX_ADR_WIDTH); // 装载接收端地址
C51 COMPILER V7.06   FASONG                                                                06/14/2008 14:42:06 PAGE 5   

 237   1              SPI_Write_Buf(WR_TX_PLOAD, tx_buf, TX_PLOAD_WIDTH);                      // 装载数据    
 238   1      //      SPI_RW_Reg(WRITE_REG + CONFIG, 0x0e);                    // IRQ收发完成中断响应，16位CRC，主发送
 239   1              CE=1;            //置高CE，激发数据发送
 240   1              inerDelay_us(10);
 241   1      }
 242          //************************************主函数************************************************************
 243          void main(void)
 244          {
 245   1              uchar temp =0;  
 246   1          init_NRF24L01() ;
 247   1              led0=0;led1=0;led2=0;led3=0;
 248   1              P0=0x00;
 249   1              nRF24L01_TxPacket(TxBuf);       // Transmit Tx buffer data
 250   1              Delay(6000);
 251   1              P0=0xBF;
 252   1              while(1)
 253   1              {       
 254   2                              if(temp<4)
 255   2                      {
 256   3                      switch(temp)
 257   3                      {
 258   4                      case    1:      
 259   4                              P0=     0xBF;
 260   4                              break;  
 261   4                      case    2:       
 262   4                      P0=     0xf7;
 263   4                      
 264   4                                      break;  
 265   4                      case    3:
 266   4                                      P0=     0xFE;
 267   4      
 268   4                              break;  
 269   4                      default:  break;
 270   4                      }
 271   3                      }
 272   2              if(temp==3)
 273   2                      {
 274   3                      temp=0;
 275   3                      }
 276   2                      nRF24L01_TxPacket(TxBuf);       // Transmit Tx buffer data
 277   2                      Delay(20000);
 278   2                      SPI_RW_Reg(WRITE_REG+STATUS,0XFF);  
 279   2                      temp++;
 280   2                      }
 281   1              
 282   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    482    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     53      17
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
